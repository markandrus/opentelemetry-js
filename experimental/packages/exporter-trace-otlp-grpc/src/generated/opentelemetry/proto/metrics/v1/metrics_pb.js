// source: opentelemetry/proto/metrics/v1/metrics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var opentelemetry_proto_common_v1_common_pb = require('../../../../opentelemetry/proto/common/v1/common_pb.js');
goog.object.extend(proto, opentelemetry_proto_common_v1_common_pb);
var opentelemetry_proto_resource_v1_resource_pb = require('../../../../opentelemetry/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opentelemetry_proto_resource_v1_resource_pb);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.AggregationTemporality', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DoubleDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DoubleExemplar', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DoubleGauge', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DoubleHistogram', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.DoubleSum', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.IntDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.IntExemplar', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.IntGauge', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.IntHistogram', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.IntSum', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Metric', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.Metric.DataCase', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.v1.ResourceMetrics', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.ResourceMetrics.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.ResourceMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.ResourceMetrics.displayName = 'proto.opentelemetry.proto.metrics.v1.ResourceMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.displayName = 'proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.Metric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.Metric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.Metric.displayName = 'proto.opentelemetry.proto.metrics.v1.Metric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.IntGauge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.IntGauge.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.IntGauge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.IntGauge.displayName = 'proto.opentelemetry.proto.metrics.v1.IntGauge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.DoubleGauge.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.DoubleGauge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.DoubleGauge.displayName = 'proto.opentelemetry.proto.metrics.v1.DoubleGauge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.IntSum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.IntSum.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.IntSum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.IntSum.displayName = 'proto.opentelemetry.proto.metrics.v1.IntSum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.DoubleSum.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.DoubleSum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.DoubleSum.displayName = 'proto.opentelemetry.proto.metrics.v1.DoubleSum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.IntHistogram.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.IntHistogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.IntHistogram.displayName = 'proto.opentelemetry.proto.metrics.v1.IntHistogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.DoubleHistogram.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.DoubleHistogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.DoubleHistogram.displayName = 'proto.opentelemetry.proto.metrics.v1.DoubleHistogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.IntDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.IntDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.IntDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.IntDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.DoubleDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.DoubleDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.displayName = 'proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.IntExemplar.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.IntExemplar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.IntExemplar.displayName = 'proto.opentelemetry.proto.metrics.v1.IntExemplar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.v1.DoubleExemplar.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.v1.DoubleExemplar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.v1.DoubleExemplar.displayName = 'proto.opentelemetry.proto.metrics.v1.DoubleExemplar';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && opentelemetry_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    instrumentationLibraryMetricsList: jspb.Message.toObjectList(msg.getInstrumentationLibraryMetricsList(),
    proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.ResourceMetrics;
  return proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opentelemetry_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.deserializeBinaryFromReader);
      msg.addInstrumentationLibraryMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.ResourceMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getInstrumentationLibraryMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.serializeBinaryToWriter
    );
  }
};


/**
 * optional opentelemetry.proto.resource.v1.Resource resource = 1;
 * @return {?proto.opentelemetry.proto.resource.v1.Resource}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.getResource = function() {
  return /** @type{?proto.opentelemetry.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_resource_v1_resource_pb.Resource, 1));
};


/**
 * @param {?proto.opentelemetry.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics>}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.getInstrumentationLibraryMetricsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.setInstrumentationLibraryMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics}
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.addInstrumentationLibraryMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.ResourceMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.ResourceMetrics.prototype.clearInstrumentationLibraryMetricsList = function() {
  return this.setInstrumentationLibraryMetricsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrumentationLibrary: (f = msg.getInstrumentationLibrary()) && opentelemetry_proto_common_v1_common_pb.InstrumentationLibrary.toObject(includeInstance, f),
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.opentelemetry.proto.metrics.v1.Metric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics;
  return proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.InstrumentationLibrary;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.InstrumentationLibrary.deserializeBinaryFromReader);
      msg.setInstrumentationLibrary(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.metrics.v1.Metric;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrumentationLibrary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.InstrumentationLibrary.serializeBinaryToWriter
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.metrics.v1.Metric.serializeBinaryToWriter
    );
  }
};


/**
 * optional opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
 * @return {?proto.opentelemetry.proto.common.v1.InstrumentationLibrary}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.getInstrumentationLibrary = function() {
  return /** @type{?proto.opentelemetry.proto.common.v1.InstrumentationLibrary} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_common_v1_common_pb.InstrumentationLibrary, 1));
};


/**
 * @param {?proto.opentelemetry.proto.common.v1.InstrumentationLibrary|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.setInstrumentationLibrary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.clearInstrumentationLibrary = function() {
  return this.setInstrumentationLibrary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.hasInstrumentationLibrary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Metric metrics = 2;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.Metric>}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.Metric, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.Metric>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} returns this
*/
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric}
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.metrics.v1.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics} returns this
 */
proto.opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_ = [[4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.Metric.DataCase = {
  DATA_NOT_SET: 0,
  INT_GAUGE: 4,
  DOUBLE_GAUGE: 5,
  INT_SUM: 6,
  DOUBLE_SUM: 7,
  INT_HISTOGRAM: 8,
  DOUBLE_HISTOGRAM: 9
};

/**
 * @return {proto.opentelemetry.proto.metrics.v1.Metric.DataCase}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDataCase = function() {
  return /** @type {proto.opentelemetry.proto.metrics.v1.Metric.DataCase} */(jspb.Message.computeOneofCase(this, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.Metric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Metric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 3, ""),
    intGauge: (f = msg.getIntGauge()) && proto.opentelemetry.proto.metrics.v1.IntGauge.toObject(includeInstance, f),
    doubleGauge: (f = msg.getDoubleGauge()) && proto.opentelemetry.proto.metrics.v1.DoubleGauge.toObject(includeInstance, f),
    intSum: (f = msg.getIntSum()) && proto.opentelemetry.proto.metrics.v1.IntSum.toObject(includeInstance, f),
    doubleSum: (f = msg.getDoubleSum()) && proto.opentelemetry.proto.metrics.v1.DoubleSum.toObject(includeInstance, f),
    intHistogram: (f = msg.getIntHistogram()) && proto.opentelemetry.proto.metrics.v1.IntHistogram.toObject(includeInstance, f),
    doubleHistogram: (f = msg.getDoubleHistogram()) && proto.opentelemetry.proto.metrics.v1.DoubleHistogram.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric}
 */
proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.Metric;
  return proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric}
 */
proto.opentelemetry.proto.metrics.v1.Metric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 4:
      var value = new proto.opentelemetry.proto.metrics.v1.IntGauge;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntGauge.deserializeBinaryFromReader);
      msg.setIntGauge(value);
      break;
    case 5:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleGauge;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleGauge.deserializeBinaryFromReader);
      msg.setDoubleGauge(value);
      break;
    case 6:
      var value = new proto.opentelemetry.proto.metrics.v1.IntSum;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntSum.deserializeBinaryFromReader);
      msg.setIntSum(value);
      break;
    case 7:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleSum;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleSum.deserializeBinaryFromReader);
      msg.setDoubleSum(value);
      break;
    case 8:
      var value = new proto.opentelemetry.proto.metrics.v1.IntHistogram;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntHistogram.deserializeBinaryFromReader);
      msg.setIntHistogram(value);
      break;
    case 9:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleHistogram;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleHistogram.deserializeBinaryFromReader);
      msg.setDoubleHistogram(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.Metric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.Metric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.Metric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIntGauge();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opentelemetry.proto.metrics.v1.IntGauge.serializeBinaryToWriter
    );
  }
  f = message.getDoubleGauge();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleGauge.serializeBinaryToWriter
    );
  }
  f = message.getIntSum();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opentelemetry.proto.metrics.v1.IntSum.serializeBinaryToWriter
    );
  }
  f = message.getDoubleSum();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleSum.serializeBinaryToWriter
    );
  }
  f = message.getIntHistogram();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.opentelemetry.proto.metrics.v1.IntHistogram.serializeBinaryToWriter
    );
  }
  f = message.getDoubleHistogram();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleHistogram.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unit = 3;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional IntGauge int_gauge = 4;
 * @return {?proto.opentelemetry.proto.metrics.v1.IntGauge}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getIntGauge = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.IntGauge} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntGauge, 4));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.IntGauge|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setIntGauge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearIntGauge = function() {
  return this.setIntGauge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasIntGauge = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DoubleGauge double_gauge = 5;
 * @return {?proto.opentelemetry.proto.metrics.v1.DoubleGauge}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDoubleGauge = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.DoubleGauge} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleGauge, 5));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.DoubleGauge|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setDoubleGauge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearDoubleGauge = function() {
  return this.setDoubleGauge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasDoubleGauge = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IntSum int_sum = 6;
 * @return {?proto.opentelemetry.proto.metrics.v1.IntSum}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getIntSum = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.IntSum} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntSum, 6));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.IntSum|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setIntSum = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearIntSum = function() {
  return this.setIntSum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasIntSum = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DoubleSum double_sum = 7;
 * @return {?proto.opentelemetry.proto.metrics.v1.DoubleSum}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDoubleSum = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.DoubleSum} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleSum, 7));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.DoubleSum|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setDoubleSum = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearDoubleSum = function() {
  return this.setDoubleSum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasDoubleSum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional IntHistogram int_histogram = 8;
 * @return {?proto.opentelemetry.proto.metrics.v1.IntHistogram}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getIntHistogram = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.IntHistogram} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntHistogram, 8));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.IntHistogram|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setIntHistogram = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearIntHistogram = function() {
  return this.setIntHistogram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasIntHistogram = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DoubleHistogram double_histogram = 9;
 * @return {?proto.opentelemetry.proto.metrics.v1.DoubleHistogram}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.getDoubleHistogram = function() {
  return /** @type{?proto.opentelemetry.proto.metrics.v1.DoubleHistogram} */ (
    jspb.Message.getWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleHistogram, 9));
};


/**
 * @param {?proto.opentelemetry.proto.metrics.v1.DoubleHistogram|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
*/
proto.opentelemetry.proto.metrics.v1.Metric.prototype.setDoubleHistogram = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.opentelemetry.proto.metrics.v1.Metric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.v1.Metric} returns this
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.clearDoubleHistogram = function() {
  return this.setDoubleHistogram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.Metric.prototype.hasDoubleHistogram = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.IntGauge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.IntGauge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.IntDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntGauge}
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.IntGauge;
  return proto.opentelemetry.proto.metrics.v1.IntGauge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntGauge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntGauge}
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.IntDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.IntGauge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntGauge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.IntDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IntDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.IntDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.IntDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.IntDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntGauge} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntGauge.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.IntDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.IntDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntGauge} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntGauge.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.DoubleGauge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleGauge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleGauge}
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.DoubleGauge;
  return proto.opentelemetry.proto.metrics.v1.DoubleGauge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleGauge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleGauge}
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.DoubleGauge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleGauge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DoubleDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleGauge} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleGauge.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.DoubleDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleGauge} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleGauge.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.IntSum.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.IntSum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.IntSum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntSum.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.IntDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isMonotonic: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntSum}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.IntSum;
  return proto.opentelemetry.proto.metrics.v1.IntSum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntSum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntSum}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.IntDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMonotonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.IntSum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntSum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntSum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.IntDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsMonotonic();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated IntDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.IntDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.IntDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.IntDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntSum} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.IntDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.IntDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntSum} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntSum} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool is_monotonic = 3;
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.getIsMonotonic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntSum} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntSum.prototype.setIsMonotonic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.DoubleSum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleSum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isMonotonic: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleSum}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.DoubleSum;
  return proto.opentelemetry.proto.metrics.v1.DoubleSum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleSum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleSum}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMonotonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.DoubleSum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleSum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsMonotonic();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated DoubleDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleSum} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.DoubleDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleSum} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleSum} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool is_monotonic = 3;
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.getIsMonotonic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleSum} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleSum.prototype.setIsMonotonic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.IntHistogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogram}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.IntHistogram;
  return proto.opentelemetry.proto.metrics.v1.IntHistogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogram}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.IntHistogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated IntHistogramDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogram} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogram.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.DoubleHistogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.toObject, includeInstance),
    aggregationTemporality: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.DoubleHistogram;
  return proto.opentelemetry.proto.metrics.v1.DoubleHistogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    case 2:
      var value = /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (reader.readEnum());
      msg.setAggregationTemporality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.DoubleHistogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.serializeBinaryToWriter
    );
  }
  f = message.getAggregationTemporality();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated DoubleHistogramDataPoint data_points = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};


/**
 * optional AggregationTemporality aggregation_temporality = 2;
 * @return {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.getAggregationTemporality = function() {
  return /** @type {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.AggregationTemporality} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogram} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogram.prototype.setAggregationTemporality = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.IntDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    opentelemetry_proto_common_v1_common_pb.StringKeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.IntExemplar.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.IntDataPoint;
  return proto.opentelemetry.proto.metrics.v1.IntDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.StringKeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.StringKeyValue.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setValue(value);
      break;
    case 5:
      var value = new proto.opentelemetry.proto.metrics.v1.IntExemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntExemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.IntDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.StringKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeSfixed64(
      4,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.opentelemetry.proto.metrics.v1.IntExemplar.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.StringKeyValue labels = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.StringKeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.StringKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.StringKeyValue}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.StringKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sfixed64 value = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated IntExemplar exemplars = 5;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.IntExemplar>}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.IntExemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntExemplar, 5));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.IntExemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.IntExemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar}
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.opentelemetry.proto.metrics.v1.IntExemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    opentelemetry_proto_common_v1_common_pb.StringKeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.DoubleExemplar.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.DoubleDataPoint;
  return proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.StringKeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.StringKeyValue.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 5:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleExemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleExemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.StringKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleExemplar.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.StringKeyValue labels = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.StringKeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.StringKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.StringKeyValue}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.StringKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double value = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated DoubleExemplar exemplars = 5;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleExemplar>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.DoubleExemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleExemplar, 5));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleExemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar}
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.opentelemetry.proto.metrics.v1.DoubleExemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.repeatedFields_ = [1,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    opentelemetry_proto_common_v1_common_pb.StringKeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bucketCountsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    explicitBoundsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.IntExemplar.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint;
  return proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.StringKeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.StringKeyValue.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSum(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBucketCounts(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addExplicitBounds(values[i]);
      }
      break;
    case 8:
      var value = new proto.opentelemetry.proto.metrics.v1.IntExemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.IntExemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.StringKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = message.getSum();
  if (f !== 0) {
    writer.writeSfixed64(
      5,
      f
    );
  }
  f = message.getBucketCountsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      6,
      f
    );
  }
  f = message.getExplicitBoundsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      7,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.opentelemetry.proto.metrics.v1.IntExemplar.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.StringKeyValue labels = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.StringKeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.StringKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.StringKeyValue}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.StringKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sfixed64 sum = 5;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setSum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated fixed64 bucket_counts = 6;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getBucketCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setBucketCountsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.addBucketCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.clearBucketCountsList = function() {
  return this.setBucketCountsList([]);
};


/**
 * repeated double explicit_bounds = 7;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getExplicitBoundsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setExplicitBoundsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.addExplicitBounds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.clearExplicitBoundsList = function() {
  return this.setExplicitBoundsList([]);
};


/**
 * repeated IntExemplar exemplars = 8;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.IntExemplar>}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.IntExemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.IntExemplar, 8));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.IntExemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.IntExemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar}
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.opentelemetry.proto.metrics.v1.IntExemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntHistogramDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.repeatedFields_ = [1,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    opentelemetry_proto_common_v1_common_pb.StringKeyValue.toObject, includeInstance),
    startTimeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sum: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    bucketCountsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    explicitBoundsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    exemplarsList: jspb.Message.toObjectList(msg.getExemplarsList(),
    proto.opentelemetry.proto.metrics.v1.DoubleExemplar.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint;
  return proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.StringKeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.StringKeyValue.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setStartTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSum(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBucketCounts(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addExplicitBounds(values[i]);
      }
      break;
    case 8:
      var value = new proto.opentelemetry.proto.metrics.v1.DoubleExemplar;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.v1.DoubleExemplar.deserializeBinaryFromReader);
      msg.addExemplars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.StringKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getStartTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = message.getSum();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getBucketCountsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      6,
      f
    );
  }
  f = message.getExplicitBoundsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      7,
      f
    );
  }
  f = message.getExemplarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.opentelemetry.proto.metrics.v1.DoubleExemplar.serializeBinaryToWriter
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.StringKeyValue labels = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.StringKeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.StringKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.StringKeyValue}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.StringKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional fixed64 start_time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getStartTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setStartTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 time_unix_nano = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 count = 4;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double sum = 5;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setSum = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated fixed64 bucket_counts = 6;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getBucketCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setBucketCountsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.addBucketCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.clearBucketCountsList = function() {
  return this.setBucketCountsList([]);
};


/**
 * repeated double explicit_bounds = 7;
 * @return {!Array<number>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getExplicitBoundsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setExplicitBoundsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.addExplicitBounds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.clearExplicitBoundsList = function() {
  return this.setExplicitBoundsList([]);
};


/**
 * repeated DoubleExemplar exemplars = 8;
 * @return {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleExemplar>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.getExemplarsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.v1.DoubleExemplar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.v1.DoubleExemplar, 8));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.v1.DoubleExemplar>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.setExemplarsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar}
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.addExemplars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.opentelemetry.proto.metrics.v1.DoubleExemplar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.prototype.clearExemplarsList = function() {
  return this.setExemplarsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.IntExemplar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.IntExemplar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.toObject = function(includeInstance, msg) {
  var f, obj = {
    filteredLabelsList: jspb.Message.toObjectList(msg.getFilteredLabelsList(),
    opentelemetry_proto_common_v1_common_pb.StringKeyValue.toObject, includeInstance),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0),
    spanId: msg.getSpanId_asB64(),
    traceId: msg.getTraceId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.IntExemplar;
  return proto.opentelemetry.proto.metrics.v1.IntExemplar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntExemplar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.StringKeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.StringKeyValue.deserializeBinaryFromReader);
      msg.addFilteredLabels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.IntExemplar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.IntExemplar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilteredLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.StringKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getFilteredLabelsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.StringKeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar} returns this
*/
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.setFilteredLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.StringKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.StringKeyValue}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.addFilteredLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.StringKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.clearFilteredLabelsList = function() {
  return this.setFilteredLabelsList([]);
};


/**
 * optional fixed64 time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sfixed64 value = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes span_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getSpanId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes span_id = 4;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes trace_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getTraceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes trace_id = 5;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.v1.IntExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.IntExemplar.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.v1.DoubleExemplar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.toObject = function(includeInstance, msg) {
  var f, obj = {
    filteredLabelsList: jspb.Message.toObjectList(msg.getFilteredLabelsList(),
    opentelemetry_proto_common_v1_common_pb.StringKeyValue.toObject, includeInstance),
    timeUnixNano: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    spanId: msg.getSpanId_asB64(),
    traceId: msg.getTraceId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.v1.DoubleExemplar;
  return proto.opentelemetry.proto.metrics.v1.DoubleExemplar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_common_v1_common_pb.StringKeyValue;
      reader.readMessage(value,opentelemetry_proto_common_v1_common_pb.StringKeyValue.deserializeBinaryFromReader);
      msg.addFilteredLabels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimeUnixNano(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.v1.DoubleExemplar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilteredLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      opentelemetry_proto_common_v1_common_pb.StringKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getTimeUnixNano();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * repeated opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
 * @return {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getFilteredLabelsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, opentelemetry_proto_common_v1_common_pb.StringKeyValue, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.common.v1.StringKeyValue>} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} returns this
*/
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.setFilteredLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.common.v1.StringKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.common.v1.StringKeyValue}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.addFilteredLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.common.v1.StringKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.clearFilteredLabelsList = function() {
  return this.setFilteredLabelsList([]);
};


/**
 * optional fixed64 time_unix_nano = 2;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getTimeUnixNano = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.setTimeUnixNano = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double value = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bytes span_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getSpanId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes span_id = 4;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes trace_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getTraceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes trace_id = 5;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.v1.DoubleExemplar} returns this
 */
proto.opentelemetry.proto.metrics.v1.DoubleExemplar.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.v1.AggregationTemporality = {
  AGGREGATION_TEMPORALITY_UNSPECIFIED: 0,
  AGGREGATION_TEMPORALITY_DELTA: 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE: 2
};

goog.object.extend(exports, proto.opentelemetry.proto.metrics.v1);
