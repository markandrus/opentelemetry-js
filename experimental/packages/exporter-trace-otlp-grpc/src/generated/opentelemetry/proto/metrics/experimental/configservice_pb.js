// source: opentelemetry/proto/metrics/experimental/configservice.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var opentelemetry_proto_resource_v1_resource_pb = require('../../../../opentelemetry/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opentelemetry_proto_resource_v1_resource_pb);
goog.exportSymbol('proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern', null, global);
goog.exportSymbol('proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.MatchCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.displayName = 'proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.displayName = 'proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.repeatedFields_, null);
};
goog.inherits(proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.displayName = 'proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_);
};
goog.inherits(proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.displayName = 'proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && opentelemetry_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    lastKnownFingerprint: msg.getLastKnownFingerprint_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest;
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new opentelemetry_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opentelemetry_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastKnownFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      opentelemetry_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getLastKnownFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional opentelemetry.proto.resource.v1.Resource resource = 1;
 * @return {?proto.opentelemetry.proto.resource.v1.Resource}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.getResource = function() {
  return /** @type{?proto.opentelemetry.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opentelemetry_proto_resource_v1_resource_pb.Resource, 1));
};


/**
 * @param {?proto.opentelemetry.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest} returns this
*/
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes last_known_fingerprint = 2;
 * @return {!(string|Uint8Array)}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.getLastKnownFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes last_known_fingerprint = 2;
 * This is a type-conversion wrapper around `getLastKnownFingerprint()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.getLastKnownFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastKnownFingerprint()));
};


/**
 * optional bytes last_known_fingerprint = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastKnownFingerprint()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.getLastKnownFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastKnownFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigRequest.prototype.setLastKnownFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: msg.getFingerprint_asB64(),
    schedulesList: jspb.Message.toObjectList(msg.getSchedulesList(),
    proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.toObject, includeInstance),
    suggestedWaitTimeSec: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse;
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.deserializeBinaryFromReader);
      msg.addSchedules(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuggestedWaitTimeSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSchedulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.serializeBinaryToWriter
    );
  }
  f = message.getSuggestedWaitTimeSec();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    exclusionPatternsList: jspb.Message.toObjectList(msg.getExclusionPatternsList(),
    proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.toObject, includeInstance),
    inclusionPatternsList: jspb.Message.toObjectList(msg.getInclusionPatternsList(),
    proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.toObject, includeInstance),
    periodSec: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule;
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.deserializeBinaryFromReader);
      msg.addExclusionPatterns(value);
      break;
    case 2:
      var value = new proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern;
      reader.readMessage(value,proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.deserializeBinaryFromReader);
      msg.addInclusionPatterns(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeriodSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExclusionPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.serializeBinaryToWriter
    );
  }
  f = message.getInclusionPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.serializeBinaryToWriter
    );
  }
  f = message.getPeriodSec();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.MatchCase = {
  MATCH_NOT_SET: 0,
  EQUALS: 1,
  STARTS_WITH: 2
};

/**
 * @return {proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.MatchCase}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.getMatchCase = function() {
  return /** @type {proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.MatchCase} */(jspb.Message.computeOneofCase(this, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.toObject = function(opt_includeInstance) {
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.toObject = function(includeInstance, msg) {
  var f, obj = {
    equals: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startsWith: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern;
  return proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquals(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartsWith(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string equals = 1;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.getEquals = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.setEquals = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.clearEquals = function() {
  return jspb.Message.setOneofField(this, 1, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.hasEquals = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string starts_with = 2;
 * @return {string}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.getStartsWith = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.setStartsWith = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.clearStartsWith = function() {
  return jspb.Message.setOneofField(this, 2, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.prototype.hasStartsWith = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Pattern exclusion_patterns = 1;
 * @return {!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.getExclusionPatternsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, 1));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} returns this
*/
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.setExclusionPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.addExclusionPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.clearExclusionPatternsList = function() {
  return this.setExclusionPatternsList([]);
};


/**
 * repeated Pattern inclusion_patterns = 2;
 * @return {!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.getInclusionPatternsList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern>} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} returns this
*/
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.setInclusionPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.addInclusionPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.clearInclusionPatternsList = function() {
  return this.setInclusionPatternsList([]);
};


/**
 * optional int32 period_sec = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.getPeriodSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.prototype.setPeriodSec = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes fingerprint = 1;
 * @return {!(string|Uint8Array)}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.getFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes fingerprint = 1;
 * This is a type-conversion wrapper around `getFingerprint()`
 * @return {string}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.getFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFingerprint()));
};


/**
 * optional bytes fingerprint = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFingerprint()`
 * @return {!Uint8Array}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.getFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.setFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Schedule schedules = 2;
 * @return {!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule>}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.getSchedulesList = function() {
  return /** @type{!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule, 2));
};


/**
 * @param {!Array<!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule>} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} returns this
*/
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.setSchedulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.addSchedules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.clearSchedulesList = function() {
  return this.setSchedulesList([]);
};


/**
 * optional int32 suggested_wait_time_sec = 3;
 * @return {number}
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.getSuggestedWaitTimeSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse} returns this
 */
proto.opentelemetry.proto.metrics.experimental.MetricConfigResponse.prototype.setSuggestedWaitTimeSec = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.opentelemetry.proto.metrics.experimental);
